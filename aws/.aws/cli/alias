[toplevel]

cfn     = cloudformation
conf    = configure
regions = ec2 describe-regions --query 'Regions[].RegionName[]' --output text
whoami  = sts get-caller-identity


[command cloudformation]

ls = describe-stacks --query 'Stacks[].[StackName,StackStatus]'
rm = delete-stack --stack-name

stat = describe-stack-events \
  --max-items 5 \
  --query 'StackEvents[].[
    Timestamp,
    ResourceType,
    ResourceStatus
  ]' \
  --stack-name


[command configure]

ls = list-profiles


[command ec2]

keys = describe-key-pairs --query 'KeyPairs[].[KeyName,KeyPairId,KeyType,KeyFingerprint]'

efa = describe-instance-types \
  --filters Name=network-info.efa-supported,Values=true \
  --query 'InstanceTypes[].[
    InstanceType,
    join(`\u0020`, [to_string(VCpuInfo.DefaultVCpus), `vCPUs`]),
    join(`\u0020`, [to_string(ProcessorInfo.SustainedClockSpeedInGhz), `GHz`]),
    join(`,`,       ProcessorInfo.SupportedArchitectures[]),
    join(`\u0020`, [to_string(MemoryInfo.SizeInMiB), `MiB`]),
    GpuInfo && GpuInfo.Gpus[0].Count || `-`,
    GpuInfo && join(`\u0020`, GpuInfo.Gpus[0].[Manufacturer, Name]) || `-`,
    GpuInfo && join(`\u0020`, [to_string(GpuInfo.Gpus[0].MemoryInfo.SizeInMiB), `MiB`]) || `-`,
    join(`\u0020`, [to_string(NetworkInfo.EfaInfo.MaximumEfaInterfaces), `EFA(s)`])
  ] | sort_by(@, &[0])'

efa-global = !f() {
    echo "Finding instance types with EFA support in all regions (this may take a while)..."
    for region in $(aws regions); do
      echo "${region}:"
      aws ec2 efa --region $region
      echo ""
    done
  }; f

find = !f() {
    instance=$1
    echo "Locating regions with ${instance}..."
    for region in $(aws regions); do
      aws ec2 describe-instance-types --region $region --instance-types $instance &> /dev/null
      [[ $? -eq 0 ]] && echo $region
    done
  }; f

ls = describe-instances \
  --query 'Reservations[].Instances[].[
    InstanceType,
    InstanceId,
    Tags[?Key==`Name`]|[0].Value,
   (PublicIpAddress != `None`) && PublicIpAddress || `-`,
    PrivateIpAddress,
   (NetworkInterfaces[0].InterfaceType == `efa`) && `efa` || `-`,
    Placement.AvailabilityZone,
    State.Name
  ] | sort_by(@, &[0])'

ls-clusters = describe-instances \
  --filters 'Name=tag-key,Values=parallelcluster:version' \
  --query 'Reservations[].Instances[].[
    Tags[?Key==`parallelcluster:cluster-name`]|[0].Value,
    InstanceType,
   (Tags[?Key==`parallelcluster:node-type`]|[0].Value == `HeadNode`)
        && `-`
        || join(`:`, [to_string(Tags[?Key==`parallelcluster:queue-name`]|[0].Value),
                      to_string(Tags[?Key==`parallelcluster:compute-resource-name`]|[0].Value)]),
   (PublicIpAddress != `None`)
        && PublicIpAddress
        || PrivateIpAddress,
    Placement.AvailabilityZone,
    InstanceId,
    Tags[?Key==`parallelcluster:version`]|[0].Value,
    State.Name
  ] | sort_by(sort_by(@, &[1]), &[0])'
