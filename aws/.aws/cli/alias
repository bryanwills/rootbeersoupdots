[toplevel]

cfn     = cloudformation
conf    = configure
regions = ec2 describe-regions --query 'Regions[].RegionName[]' --output text
whoami  = sts get-caller-identity


[command cloudformation]

ls = describe-stacks --query 'Stacks[].[StackName,StackStatus]'
rm = delete-stack --stack-name

stat = describe-stack-events \
    --max-items 5 \
    --query 'StackEvents[].[
        Timestamp,
        ResourceType,
        ResourceStatus
    ]' \
    --stack-name


[command configure]

ls = list-profiles


[command ec2]

keys = describe-key-pairs --query 'KeyPairs[].[KeyName,KeyPairId,KeyType,KeyFingerprint]'

efa = describe-instance-types \
    --filters Name=network-info.efa-supported,Values=true \
    --query 'InstanceTypes[].[
        InstanceType,
        NetworkInfo.EfaInfo.MaximumEfaInterfaces,
        ProcessorInfo.SupportedArchitectures[0]
    ] | sort_by(@, &[0])'

efa-global =
    !f() {
        echo "Finding instance types with EFA support in all regions (this may take a while)..."
        for REGION in $(aws regions); do
            echo "${REGION}:"
            aws ec2 efa --region $REGION
            echo ""
        done
    }; f

find =
    !f() {
        INSTANCE=$1
        echo "Locating regions with ${INSTANCE}..."
        for REGION in $(aws regions); do
            aws ec2 describe-instance-types --region $REGION --instance-types $INSTANCE &> /dev/null
            if [[ $? -eq 0 ]]; then
                echo $REGION
            fi
        done
    }; f

ls = describe-instances \
    --query 'Reservations[].Instances[].[
        InstanceType,
        InstanceId,
        Tags[?Key==`Name`]|[0].Value,
        State.Name,
        PublicIpAddress
    ] | sort_by(@, &[0])'
